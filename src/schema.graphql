type Query {
  users(query: String, first: Int, skip: Int, after: String): [User!]!
  user(id: ID!): User!
  tags(query: String, first: Int, skip: Int, after: String): [Tag!]!
  tag(id: ID!): Tag!
  posts(query: String, first: Int, skip: Int, after: String): [Post!]!
  post(id: ID!): Post!
  comments(first: Int, skip: Int, after: String): [Comment!]!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  logIn(data: UserLoginInput!): AuthPayload!
  updateUser(id: ID!, data: UpdateUserInput!): User!
  deleteUser(id: ID!): User!
  createTag(name: String!): Tag!
  updateTag(id: ID!, data: UpdateTagInput!): Tag!
  deleteTag(id: ID!): Tag!
  createPost(data: CreatePostInput!): Post!
  updatePost(id: ID!, data: UpdatePostInput!): Post!
  deletePost(id: ID!): Post!
  createComment(data: CreateCommentInput!): Comment!
  updateComment(id: ID!, data: UpdateCommentInput!): Comment!
  deleteComment(id: ID!): Comment!
}

enum UserType {
  ADMIN
  USER
}

type User {
  id: ID!
  type: UserType!
  email: String
  password: String!
  name: String!
  description: String
  profile_picture: String
  updatedAt: String!
  createdAt: String!
  posts: [Post!]!
  comments: [Comment!]!
}

type Tag {
  id: ID!
  name: String!
  posts: [Post!]!
}

type Post {
  id: ID!
  title: String!
  subtitle: String
  body: String!
  published: Boolean!
  updatedAt: String!
  createdAt: String!
  tags: [Tag!]!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  text: String!
  updatedAt: String!
  createdAt: String!
  author: User!
  post: Post!
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  description: String
  profile_picture: String
}

input UpdateUserInput {
  name: String
  email: String
  password: String
  description: String
  profile_picture: String
}

input UpdateTagInput {
  name: String
  posts: [ID!]
}

input ConnectTagToPost {
  id: ID!
}

input CreatePostInput {
  title: String!
  body: String!
  subtitle: String
  published: Boolean!
  tags: [ConnectTagToPost!]!
}

input UpdatePostInput {
  title: String
  body: String
  subtitle: String
  published: Boolean
  tags: [ConnectTagToPost]
}

input CreateCommentInput {
  text: String!
  post: ID!
}

input UpdateCommentInput {
  text: String
}

input UserLoginInput {
  email: String!
  password: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
}
